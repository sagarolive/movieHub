// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String?   @unique
  image         String?
  password      String?
  emailVerified DateTime?
  sessions      Session[]
  accounts      Account[]
  movieIDs      String[]  @db.ObjectId
  movies        Movie[]   @relation(fields: [movieIDs], references: [id])
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Movie {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  releaseYear  Int
  description  String
  genre        Genre[]
  director     String
  country      String?
  runtime      Int
  rating       Float
  viewCount    Int      @default(0)
  video        String
  thumbNailUrl String
  userIDs      String[] @db.ObjectId
  users        User[]   @relation(fields: [userIDs], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

enum Genre {
  WAR
  CRIME
  DRAMA
  MUSIC
  SPORT
  ACTION
  COMEDY
  FAMILY
  HORROR
  FANTASY
  MYSTERY
  ROMANCE
  THRILLER
  ADVENTURE
  ANIMATION
  BIOGRAPHY
  DOCUMENTRY
}

enum FilterType {
  TRENDING
  TOP_RATED
  BY_COUNTRY
  BY_RELEASE_YEAR
}
